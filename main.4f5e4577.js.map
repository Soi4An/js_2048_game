{"version":3,"sources":["scripts/helpers/checkLose.js","scripts/helpers/createCleanBoard.js","scripts/helpers/addNewTile.js","scripts/helpers/beforeAfterMove.js","scripts/helpers/moveCell.js","scripts/helpers/makeMoveBy.js","scripts/main.js"],"names":["checkLose","board","some","tr","includes","posibleMove","i","length","col","row","style","opacity","classList","add","remove","createCleanBoard","matrix","r","rows","push","c","cols","createTile","digit","innerText","createNewTile","Math","random","emptyCells","addNewTile","letVariables","floor","resetBeforeMove","moves","dontAddCells","map","cell","afterMove","document","querySelectorAll","moveCell","constant","startIndex","endIndex","byRow","addtiton","startCell","trs","endCell","sum","Number","score","makeMoveBy","firstLoopParamIsRow","secondLoopIsIncrease","quantityRows","quantityCols","button","querySelector","messageLose","messageWin","messageStart","table","trsTbody","children","addEventsKeyboard","addEventListener","e","code","forEach","innerHTML","td","removeAttribute"],"mappings":"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","file":"main.4f5e4577.js","sourceRoot":"..\\src","sourcesContent":["\nimport { board, table, messageStart, messageLose } from '../main';\n\nexport const checkLose = () => {\n  if (!board.some(tr => tr.includes(0))) {\n    const posibleMove = board.some(tr => {\n      for (let i = 1; i < tr.length; i++) {\n        if (tr[i] === tr[i - 1]) {\n          return true;\n        }\n      }\n    });\n\n    if (posibleMove) {\n      return;\n    }\n\n    for (let col = 0; col < board[0].length; col++) {\n      for (let row = 1; row < board.length; row++) {\n        if (board[row][col] === board[row - 1][col]) {\n          return;\n        }\n      }\n    }\n\n    table.style.opacity = 0.5;\n    messageStart.classList.add('hidden');\n    messageLose.classList.remove('hidden');\n  }\n};\n","\nimport { cols, rows } from '../main';\n\nexport const createCleanBoard = () => {\n  const matrix = [];\n\n  for (let r = 0; r < rows; r++) {\n    matrix.push([]);\n\n    for (let c = 0; c < cols; c++) {\n      matrix[r].push(0);\n    }\n  }\n\n  return matrix;\n};\n","\nimport { letVariables, rows, board, cols, trs } from '../main';\n\nconst createTile = (digit, row, col) => {\n  trs[row][col].classList.add(`field-cell--${digit}`);\n  trs[row][col].innerText = `${digit}`;\n  board[row][col] = `${digit}`;\n};\n\nconst createNewTile = (row, col) => {\n  const digit = (Math.random() < 0.1) ? 4 : 2;\n\n  letVariables.emptyCells--;\n  createTile(digit, row, col);\n};\n\nexport const addNewTile = () => {\n  while (letVariables.emptyCells >= 1) {\n    const row = Math.floor(Math.random() * rows);\n\n    while (board[row].includes(0)) {\n      const col = Math.floor(Math.random() * cols);\n\n      if (board[row][col] === 0) {\n        return createNewTile(row, col);\n      }\n    }\n\n    continue;\n  }\n};\n","\nimport { letVariables } from '../main';\nimport { addNewTile } from '../helpers/addNewTile';\n\nexport const resetBeforeMove = () => {\n  letVariables.moves = 0;\n  letVariables.dontAddCells.map(cell => cell.classList.remove('notAdd'));\n};\n\nexport const afterMove = () => {\n  if (letVariables.moves > 0) {\n    addNewTile();\n    letVariables.dontAddCells = [...document.querySelectorAll('.notAdd')];\n  }\n};\n","\nimport {\n  trs, board, letVariables, score, messageStart, messageWin,\n} from '../main';\n\nexport const moveCell = (constant, startIndex, endIndex, byRow, addtiton) => {\n  const startCell = (byRow)\n    ? trs[constant][startIndex]\n    : trs[startIndex][constant];\n  const endCell = (byRow)\n    ? trs[constant][endIndex]\n    : trs[endIndex][constant];\n\n  const digit = startCell.innerText;\n  const sum = '' + (Number(digit) * 2);\n\n  if (byRow) {\n    board[constant][startIndex] = 0;\n    board[constant][endIndex] = (addtiton) ? sum : digit;\n  } else {\n    board[startIndex][constant] = 0;\n    board[endIndex][constant] = (addtiton) ? sum : digit;\n  }\n\n  if (addtiton) {\n    endCell.classList.remove(`field-cell--${digit}`);\n    endCell.classList.add(`notAdd`);\n    letVariables.emptyCells++;\n    score.innerText = Number(score.innerText) + Number(sum);\n  }\n\n  endCell.classList.add(`field-cell--${(addtiton) ? sum : digit}`);\n  endCell.innerText = `${(addtiton) ? sum : digit}`;\n\n  startCell.classList.remove(`field-cell--${digit}`);\n  startCell.innerText = '';\n\n  letVariables.moves++;\n\n  if (endCell.innerText === '2048') {\n    messageStart.classList.add('hidden');\n    messageWin.classList.remove('hidden');\n  }\n};\n","import { moveCell } from './moveCell';\nimport { quantityRows, quantityCols, board, trs } from '../main';\n\nexport const makeMoveBy = (\n  firstLoopParamIsRow, secondLoopIsIncrease,\n) => {\n  switch (true) {\n    case (firstLoopParamIsRow && secondLoopIsIncrease): {\n      for (let r = 0; r <= quantityRows; r++) {\n        for (let c = 0; c <= quantityCols; c++) {\n          if (board[r][c] !== 0 && c !== 0) {\n            for (let i = c - 1; i >= 0; i--) {\n              if (trs[r][i].innerText !== '') {\n                if (trs[r][i].innerText === trs[r][c].innerText\n                  && !trs[r][i].classList['notAdd']) {\n                  moveCell(r, c, i, true, true);\n                  break;\n                }\n\n                if (c !== i + 1) {\n                  moveCell(r, c, i + 1, true, false);\n                }\n                break;\n              } else if (i === 0) {\n                moveCell(r, c, i, true, false);\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    case (firstLoopParamIsRow && !secondLoopIsIncrease): {\n      for (let r = 0; r <= quantityRows; r++) {\n        for (let c = quantityCols; c >= 0; c--) {\n          if (board[r][c] !== 0 && c !== quantityCols) {\n            for (let i = c + 1; i <= quantityCols; i++) {\n              if (trs[r][i].innerText !== '') {\n                if (trs[r][i].innerText === trs[r][c].innerText\n                  && !trs[r][i].classList['notAdd']) {\n                  moveCell(r, c, i, true, true);\n                  break;\n                }\n\n                if (c !== i - 1) {\n                  moveCell(r, c, i - 1, true, false);\n                }\n                break;\n              } else if (i === quantityCols) {\n                moveCell(r, c, i, true, false);\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    case (!firstLoopParamIsRow && secondLoopIsIncrease): {\n      for (let c = 0; c <= quantityCols; c++) {\n        for (let r = 0; r <= quantityRows; r++) {\n          if (board[r][c] !== 0 && r !== 0) {\n            for (let i = r - 1; i >= 0; i--) {\n              if (trs[i][c].innerText !== '') {\n                if (trs[i][c].innerText === trs[r][c].innerText\n                  && !trs[i][c].classList['notAdd']) {\n                  moveCell(c, r, i, false, true);\n                  break;\n                }\n\n                if (r !== i + 1) {\n                  moveCell(c, r, i + 1, false, false);\n                }\n                break;\n              } else if (i === 0) {\n                moveCell(c, r, i, false, false);\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    case (!firstLoopParamIsRow && !secondLoopIsIncrease): {\n      for (let c = 0; c <= quantityCols; c++) {\n        for (let r = quantityRows; r >= 0; r--) {\n          if (board[r][c] !== 0 && r !== quantityRows) {\n            for (let i = r + 1; i <= quantityRows; i++) {\n              if (trs[i][c].innerText !== '') {\n                if (trs[i][c].innerText === trs[r][c].innerText\n                  && !trs[i][c].classList['notAdd']) {\n                  moveCell(c, r, i, false, true);\n                  break;\n                }\n\n                if (r !== i - 1) {\n                  moveCell(c, r, i - 1, false, false);\n                }\n                break;\n              } else if (i === quantityRows) {\n                moveCell(c, r, i, false, false);\n              }\n            }\n          }\n        }\n      }\n\n      break;\n    }\n\n    default:\n  }\n};\n","\nimport { checkLose } from './helpers/checkLose';\nimport { createCleanBoard } from './helpers/createCleanBoard';\nimport { resetBeforeMove, afterMove } from './helpers/beforeAfterMove';\nimport { addNewTile } from './helpers/addNewTile';\nimport { makeMoveBy } from './helpers/makeMoveBy';\n\nexport const rows = 4;\nexport const cols = 4;\n\nexport const quantityRows = rows - 1;\nexport const quantityCols = cols - 1;\nexport let board = createCleanBoard();\nexport const letVariables = {\n  emptyCells: rows * cols,\n  moves: 1,\n  dontAddCells: [],\n};\n\nconst button = document.querySelector('.button');\n\nexport const score = document.querySelector('.game-score');\nexport const messageLose = document.querySelector('.message-lose');\nexport const messageWin = document.querySelector('.message-win');\nexport const messageStart = document.querySelector('.message-start');\nexport const table = document.querySelector('.game-field');\n\nexport const trs = [];\n\nconst trsTbody = [...document.querySelector('tbody').children];\n\ntrsTbody.forEach(tr => {\n  trs.push([...tr.children]);\n});\n\nbutton.addEventListener('click', () => {\n  if (button.innerText === 'Restart') {\n    letVariables.moves = 1;\n    letVariables.emptyCells = rows * cols;\n    score.innerHTML = 0;\n    table.style.opacity = 1;\n\n    trs.map(tr => tr.map(td => {\n      td.removeAttribute('class');\n      td.innerText = '';\n      td.classList.add('field-cell');\n    }));\n\n    board = createCleanBoard();\n    addNewTile();\n    addNewTile();\n  }\n\n  if (button.innerText === 'Start') {\n    addNewTile();\n    addNewTile();\n    button.innerText = 'Restart';\n    button.classList.remove('start');\n    button.classList.add('restart');\n    messageStart.innerText = 'Press \"Restart\" to new game';\n    addEventsKeyboard();\n  }\n\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageStart.classList.remove('hidden');\n});\n\nfunction addEventsKeyboard() {\n  document.addEventListener('keyup', e => {\n    if (e.code === 'ArrowLeft') {\n      resetBeforeMove();\n      makeMoveBy(true, true);\n      afterMove();\n      checkLose();\n    }\n\n    if (e.code === 'ArrowRight') {\n      resetBeforeMove();\n      makeMoveBy(true, false);\n      afterMove();\n      checkLose();\n    }\n\n    if (e.code === 'ArrowDown') {\n      resetBeforeMove();\n      makeMoveBy(false, false);\n      afterMove();\n      checkLose();\n    }\n\n    if (e.code === 'ArrowUp') {\n      resetBeforeMove();\n      makeMoveBy(false, true);\n      afterMove();\n      checkLose();\n    }\n  });\n}\n"]}